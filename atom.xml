<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Diomchen.github.io</id>
    <title>DiomChen&apos;s Blog</title>
    <updated>2021-07-19T11:28:58.860Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Diomchen.github.io"/>
    <link rel="self" href="https://Diomchen.github.io/atom.xml"/>
    <subtitle>忙趁东风放纸鸢。</subtitle>
    <logo>https://Diomchen.github.io/images/avatar.png</logo>
    <icon>https://Diomchen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, DiomChen&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[🥭mongodb学习]]></title>
        <id>https://Diomchen.github.io/post/mongodb-xue-xi/</id>
        <link href="https://Diomchen.github.io/post/mongodb-xue-xi/">
        </link>
        <updated>2021-07-19T11:28:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="docker中挂载mongodb">docker中挂载mongodb</h2>
<pre><code class="language-bash">docker run -p 27017:27017 -v /data/mongo:/data/db --name mongodb -d mongo
</code></pre>
<p>特别注意：挂载的/data/db目录必须要有，并确保该目录有<strong>写</strong>权</p>
<pre><code class="language-bash">mkdir -p /data/p
</code></pre>
<h2 id="quick-start">💨Quick Start</h2>
<h3 id="数据库操作">数据库操作</h3>
<pre><code class="language-bash"># 查看当前指向数据库
db

# CRUD
##  插入(MAX_SIZE = 48MBp)
db.good.insert(&lt;文档&gt;)
### 若想插入多条数据？（插入集合）
post1 = {&quot;title&quot;:&quot;blog1&quot;,&quot;date&quot;:new Date()}
post2 = {&quot;title&quot;:&quot;blog2&quot;,&quot;date&quot;:new Date()}
post3 = {&quot;title&quot;:&quot;blog3&quot;,&quot;date&quot;:new Date()}
db.good.insert([
post1,post2,post3
])

## 查询
### 查一个
db.good.findOne()
### find会显示至多20条数据

## 更新
### 增加字段（增加评论字段）
post.comments = []
### 更新数据
db.good.update({title:&quot;my blog update&quot;},post)

## 删除
db.good.remove({title:&quot;my blog update&quot;})

</code></pre>
<h3 id="java开发中使用">Java开发中使用</h3>
<pre><code class="language-java">/*
* 对于mongodb-java-driver 3.7 以下的版本适用
*/

/**********************无验证版本**********************/
// new一个mongoClient
MongoClient mongoClient = new MongoClient(&quot;&lt;host&gt;&quot;,&lt;port&gt;);

//获取mongo数据库
MongoDatabase mongoDatabase = mongoClient.getDatabase(&quot;&lt;database_name&gt;&quot;);

/**********************有验证版本**********************/
ServerAddress serverAddress = new ServerAddress(&quot;&lt;host&gt;&quot;,27017);
List&lt;ServerAddress&gt; addressList = new ArrayList&lt;&gt;();
addressList.add(serverAddress);

//mongo验证
MongoCredential credential = MongoCredential.createScramSha1Credential(&quot;username&quot;,&quot;databaseName&quot;,&quot;password&quot;.toCharArray());

List&lt;MongoCredential&gt; credentials = new ArrayList&lt;&gt;();

credentials.add(credential);

MongoClient mongoClient = new MongoClient(addressList,credentials);

MongoDatabase mongoDatabase = mongoClient.getDatabase(&quot;databaseName&quot;);
System.out.println(&quot;Connect successfully&quot;);

/*
* 对于mongodb-java-driver 3.7 以上的版本适用
* 仅仅是这两处的不同
*/

// 连接到 mongodb 服务
mongoClient = MongoClients.create(
    MongoClientSettings.builder()
    .applyToClusterSettings(builder -&gt;
                            builder.hosts(Arrays.asList(new ServerAddress(&quot;192.168.216.131&quot;))))
    .build());

// 连接到数据库
mongoDatabase = mongoClient.getDatabase(&quot;testdb&quot;);

</code></pre>
<blockquote>
<p>Tips:</p>
<p><strong><s>对于mongo3.7以上的版本，java中对mongo的API完全不同</s></strong></p>
<p><s>若是对 3.7 以上的版本采用新API，那么就会报nullpoint错误</s></p>
<p>主要是要区分 com.mongodb.MongoClient(类) 和  com.mongodb.client.MongoClient 是接口。</p>
<p><strong>报 because there was a socket exception raised by this connection. 错误是因为数据量太大，读不出来</strong></p>
<p><strong>还有可能就是未授权yml配置需要采用 authentication-database: admin 进行授权</strong></p>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cthgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210709151856862.png" alt="" loading="lazy"></figure>
</blockquote>
<blockquote>
<p>参考资料：</p>
<p><a href="http://mongodb.github.io/mongo-java-driver/4.2/driver/getting-started/quick-start/">mongoDB JVM Drivers（4.2）文档</a></p>
<p><a href="http://mongodb.github.io/mongo-java-driver/3.9/javadoc/?com/mongodb/client/MongoClient.html">mongo-java-API文档</a></p>
<p><a href="https://blog.csdn.net/u011466470/article/details/84673761">关于 socket exception rised 错误</a></p>
<p><a href="https://www.bilibili.com/video/BV1264y1v77R?p=24">采用 authentication-database: admin 进行授权问题( 视频 )</a></p>
</blockquote>
<h3 id="mongo索引查询">mongo索引查询</h3>
<pre><code class="language-java">    /**
     * @title getTxByAddress
     * @description 通过地址找交易
     * @author DiomChen
     * @updateTime 2021/7/12 17:55
     * @throws
     * @测试数据：
     *      17yYyafrfiaaVJGcaeQdpAeHdcBQSKAuLD
     */
    @Test
    public void getTxByAddress(){
        Query query = new Query(Criteria
                .where(&quot;address&quot;).is(&quot;17yYyafrfiaaVJGcaeQdpAeHdcBQSKAuLD&quot;));
        List&lt;Addresstxs&gt; addresstxsList = mongoTemplate.find(query,Addresstxs.class);
        String txid = addresstxsList.get(0).getTxid();
        Query query1 = new Query(Criteria
        .where(&quot;txid&quot;).is(txid));
        System.out.println(mongoTemplate.find(query1,Transactions.class));
    }
</code></pre>
<h4 id="无索引">无索引</h4>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/Diomchen/PiCor/image-20210712185013822.png" alt="image-20210712185013822" loading="lazy"></figure>
<h4 id="以address建立索引">以address建立索引</h4>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/Diomchen/PiCor/image-20210712191003692.png" alt="image-20210712191003692" loading="lazy"></figure>
<blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/weixin_41127890/article/details/105536297">SpringBoot2使用mongoTemplate创建集合并添加索引</a></p>
<p><a href="https://www.cnblogs.com/williamjie/p/9297670.html">MongoDB索引管理－索引的创建、查看、删除</a></p>
<p><a href="https://www.cnblogs.com/dataoblogs/p/14121911.html">在MongoDB中执行查询与创建索引</a></p>
</blockquote>
<h2 id="基本内容">基本内容</h2>
<ul>
<li>文档：对应关系型数据库中的行，但是内部有顺序</li>
<li>集合：对应关系型数据库中的表，是有多个文档组成，对于文档内部不关心（动态模式）</li>
</ul>
<h2 id="数据类型">数据类型</h2>
<ul>
<li>null ：{&quot;x&quot; : null}</li>
<li>布尔：{&quot;x&quot; : false}</li>
<li>数值：{&quot;x&quot;:3}</li>
<li>字符串：{&quot;x&quot;:&quot;str&quot;}</li>
<li>日期：{&quot;x&quot;:new Date()}</li>
<li>正则表达式：{&quot;x&quot;:/foobar/i}</li>
<li>数组：{&quot;x&quot;:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]}</li>
<li>内嵌文档：{&quot;x&quot;:{&quot;foo&quot;,&quot;bar&quot;}}</li>
<li>对象id：{&quot;x&quot;:ObjectId()}</li>
<li>二进制数据：{&quot;x&quot;:}</li>
<li>代码：{&quot;x&quot;:function(){/*     */}}</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🧶neo4j文档整理]]></title>
        <id>https://Diomchen.github.io/post/neo4j-wen-dang-zheng-li/</id>
        <link href="https://Diomchen.github.io/post/neo4j-wen-dang-zheng-li/">
        </link>
        <updated>2021-07-19T11:26:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-环境部署方面">1. 🛠环境部署方面</h2>
<h4 id="11-版本选择">1.1 版本选择</h4>
<p>对于neo4j版本方面，3.x 对应 Java8，4.x 对应 Java11。</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/Diomchen/PiCor/image-20210708104701348.png" alt="" loading="lazy"></figure>
<p>现在87和88机器上使用的都是4.x版本。</p>
<h4 id="12-部署">1.2 部署</h4>
<h5 id="docker中部署"><strong>🐋docker中部署</strong></h5>
<p>拉取 neo4j 镜像，指定 7474，7687 端口的映射。</p>
<p><font color="green">但是一定要指定import和data映射文件夹</font></p>
<h5 id="服务器直接部署">🖥<strong>服务器直接部署</strong></h5>
<p>下载解压ce版本</p>
<p>更改/conf/neo4j.conf文件，之后启动 ./bin/neoj</p>
<pre><code class="language-shell"># With default configuration Neo4j only accepts local connections.
# To accept non-local connections, uncomment this line:

#特别注意：默认是注释的，不开启，外网不能访问web端口neo4j
dbms.default_listen_address=0.0.0.0

# You can also choose a specific network interface, and configure a non-default
# port for each connector, by setting their individual listen_address.

# The address at which this server can be reached by its clients. This may be the server's IP address or DNS name, or
# it may be the address of a reverse proxy which sits in front of the server. This setting may be overridden for
# individual connectors below.
#dbms.default_advertised_address=localhost

# You can also choose a specific advertised hostname or IP address, and
# configure an advertised port for each connector, by setting their
# individual advertised_address.

# By default, encryption is turned off.
# To turn on encryption, an ssl policy for the connector needs to be configured
# Read more in SSL policy section in this file for how to define a SSL policy.

# Bolt connector
dbms.connector.bolt.enabled=true
#dbms.connector.bolt.tls_level=DISABLED
dbms.connector.bolt.listen_address=0.0.0.0:7687
#dbms.connector.bolt.advertised_address=:7687

# HTTP Connector. There can be zero or one HTTP connectors.
dbms.connector.http.enabled=true
dbms.connector.http.listen_address=0.0.0.0:7474
#dbms.connector.http.advertised_address=:7474

# HTTPS Connector. There can be zero or one HTTPS connectors.
dbms.connector.https.enabled=false
dbms.connector.https.listen_address=0.0.0.0:7473
#dbms.connector.https.advertised_address=:7473
</code></pre>
<h2 id="2-java开发方面">2. ☕java开发方面</h2>
<h4 id="21-设置驱动启动">2.1 设置驱动启动</h4>
<p>不推荐，推荐springboot的自动配置</p>
<pre><code class="language-java">//设置driver
Driver driver = GraphDatabase.driver(&quot;bolt://192.168.216.131:7687&quot;, AuthTokens.basic(&quot;neo4j&quot;, &quot;123456&quot; ));

//打开session
Session session = driver.session();

//执行语句
String cql = &quot;create (n:Person{name:$name,title:$title})&quot;;
            String insert_test_str = session.writeTransaction(new TransactionWork&lt;String&gt;() {
                @Override
                public String execute(Transaction tx) {
                    Result result = tx.run(cql,parameters(&quot;name&quot;,&quot;diomchen&quot;,&quot;title&quot;,&quot;The Code Hero&quot;));
                    return &quot;Create Node OK!&quot;;
                }
            });

//关闭session
session.close();

//关闭driver
driver.close();
</code></pre>
<h4 id="22-springboot自动配置">2.2 springboot自动配置</h4>
<pre><code class="language-yml">#yml基本配置
    neo4j:
      uri: bolt://&lt;host&gt;:7687
      username: neo4j
      password: 123456
</code></pre>
<h5 id="通过cypher语句实现操作"><strong>通过cypher语句实现操作</strong></h5>
<p>neo4j对象：</p>
<pre><code class="language-java">@Data
@Node(labels = {&quot;Addresstxs&quot;})
public class NAddresstxs {
//    //自动生成id
//    @Id @GeneratedValue
//    private Long id;

    //交易地址表Id
    @Id
    private String addresstxsId;

    //交易地址
    @Property(name =&quot;address&quot;)
    private String address;
</code></pre>
<p>repository：</p>
<pre><code class="language-java">@Repository
public interface AddresstxsRepository extends Neo4jRepository&lt;NAddresstxs,String&gt; {

    @Query(&quot;create (n:Addresstxs{ addresstxsId:$addresstxsId , address:$address , type:$type}) return n&quot;)
    List&lt;NAddresstxs&gt; addAddresstxs(@Param(&quot;addresstxsId&quot;) String addresstxsId, @Param(&quot;address&quot;) String address, @Param(&quot;type&quot;) Integer type);

    @Query(&quot;match (n) return n&quot;)
    List&lt;NAddresstxs&gt; getAddresstxs();
    /*
    	特别需要注意返回的类型，否则会报以下问题
    */
}
</code></pre>
<p><strong><font color="green">org.springframework.data.mapping.MappingException: The schema already contains a node description under the primary label Addresstxs</font></strong></p>
<p>cypher语句在 3.x 和 4.x 中有所不同</p>
<pre><code class="language-java">//java中cql(3.x)
String cql = &quot;create (n:Person{name:{name},title:{title}})&quot;;

//java中cql(4.x)
String cql = &quot;create (n:Person{name:$name,title:$title})&quot;;
</code></pre>
<h5 id="通过neo4jtemplate"><strong>通过Neo4jTemplate</strong></h5>
<p>pom:</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-neo4j&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>注入:</p>
<pre><code class="language-java">@Resource
Neo4jTemplate neo4jTemplate;
</code></pre>
<p>其实和 MongoTemplate 操作一样，都是save，find等等，当然也支持自定条件。</p>
<h2 id="3-数据导入neo4j数据库方面">3. 💾数据导入Neo4j数据库方面</h2>
<p><mark>导入数据到neo4j是最影响使用体验的。</mark></p>
<h4 id="31-导入方式比较">3.1 导入方式比较</h4>
<p>基本方式可以见下图，但是现在可用的只有<strong>create语句，load csv语句，apoc插件</strong>，其他的基本因为缺少维护而废用。</p>
<p>第一种 create 语句，可以说是非常之慢，实际使用远低于下图的1000/s速度。</p>
<p>第二种 load csv 语句，也是现在用的，3k+ 节点和12k+ 关系 导入花了 30 分钟左右 。</p>
<p>但是网上有<a href="https://zhuanlan.zhihu.com/p/90691645">创建约束</a>的方法解决，也有通过添加**:auto using periodic commit 200** 控制提交频率的方式来提高导入速度，这些都还未尝试过。</p>
<p>最后一种 apoc 插件导入，还未使用，暂不做评价。</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/Diomchen/PiCor/image-20210710145416951.png" alt="" loading="lazy"></figure>
<h4 id="32-csv数据创建和导入">3.2 CSV数据创建和导入</h4>
<h5 id="csv规范"><strong>📃CSV规范</strong></h5>
<p>Relationships规范</p>
<ul>
<li>START_ID</li>
<li>END_ID</li>
<li>TYPE</li>
</ul>
<p>所以对于Node就需要有能够建立关系的标识性属性。</p>
<p><em>cypher 语句实际使用中，对于 TYPE 属性也并非硬性要求。</em></p>
<h5 id="csv创建与导出"><strong>⛓CSV创建与导出</strong></h5>
<ol>
<li>java先从mongo中读取所需数据</li>
<li>创建导出csv所需属性的对象</li>
<li>利用fastjson插件，将对象列表转成json字符串</li>
<li>利用jackson插件，将json字符串转成csv</li>
<li>导出csv文件</li>
</ol>
<p>工具类：</p>
<pre><code class="language-java">    //对象列表转csv    public static&lt;T&gt; void Object2Csv(List&lt;T&gt; objectList,String savePath) throws IOException {        JSONArray jsonArray = new JSONArray();        jsonArray.addAll(objectList);        String ss = jsonArray.toJSONString();        JsonNode jsonNode = new ObjectMapper().readTree(ss);        CsvSchema.Builder csvSchemaBuild = CsvSchema.builder();        JsonNode fObject = jsonNode.elements().next();        fObject.fieldNames().forEachRemaining(fieldName -&gt; {csvSchemaBuild.addColumn(fieldName);});        CsvSchema csvSchema = csvSchemaBuild.build().withHeader();        OutputStreamWriter ow = new OutputStreamWriter(new FileOutputStream(new File(savePath)),&quot;gbk&quot;);        CsvMapper csvMapper = new CsvMapper();        csvMapper.writerFor(JsonNode.class)                .with(csvSchema)                .writeValue(ow, jsonNode);    }        //对象列表转json    public static &lt;T&gt; void Object2Json(List&lt;T&gt; objectList,String savePath) throws IOException {        JSONArray jsonArray = new JSONArray();        jsonArray.addAll(objectList);        String ss = jsonArray.toJSONString();        save(ss,savePath);    }    private static void save(String jsonstr,String filename) throws IOException {        OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(filename), &quot;gbk&quot;);        osw.write(jsonstr);        osw.flush();        osw.close();    }
</code></pre>
<h5 id="csv导入"><strong>🧣CSV导入</strong></h5>
<p>只尝试过采用LOAD CSV语句的导出方式。</p>
<pre><code class="language-java">    @Query(&quot;load csv with HEADERS from \&quot;file:///addrN.csv\&quot; as line merge (n:Address{address:line.address}) &quot;)    void optInAddAddressNode();
</code></pre>
<p><em>merge</em> 的好处，它会判断库里面是否以及存在该相同节点，若有，则不会创建，反之，则会创建新节点。这样就避免了库里面存在多个重复节点。</p>
<blockquote>
<p>参考资料：</p>
<p><a href="https://blog.csdn.net/mathew_leung/article/details/101838350">centos7 服务器安装neo4j并实现远程访问</a></p>
<p><a href="https://neo4j.com/docs/operations-manual/current/tutorial/neo4j-admin-import/">Neo4j Admin import</a></p>
<p><a href="https://neo4j.com/labs/apoc/4.2/overview/apoc.algo/">apoc文档</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Diomchen.github.io/post/hello-gridea/</id>
        <link href="https://Diomchen.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>